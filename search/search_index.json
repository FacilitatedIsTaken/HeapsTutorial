{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to this tutorial on using Heaps in game development. Heaps is a powerful game framework created by Nicolas Cannasse for the Haxe programming language. In this tutorial, we will cover all the necessary steps to start developing games with Heaps.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Before you start using Heaps, you need to have the following prerequisites installed on your system:</p> <ul> <li> <p>Haxe compiler (version 4 or later, Nightly build works also)</p> </li> <li> <p>Heaps framework (latest version)</p> </li> <li> <p>A code editor or integrated development environment (IDE)</p> </li> </ul> <p>If you don't have these prerequisites installed, we recommend you to follow Deepnight's tutorial on installing Haxe to get started.</p>"},{"location":"#target-audience","title":"Target Audience","text":"<p>This tutorial is designed for beginners who are interested in game development and have little programming experience. We will cover the basics of Haxe programming language as well as Heaps.</p>"},{"location":"#overview","title":"Overview","text":"<p>In this tutorial, we will start with the basics of Haxe programming language and gradually move towards more advanced topics. We will cover the following topics:</p> <ul> <li>Graphics and Rendering</li> <li>Input and Audio</li> <li>Physics and Collision Detection</li> <li>Use of Sprites and Spritesheets</li> <li>Advanced Game Development Concepts</li> </ul> <p>Throughout the tutorial, we will provide examples and exercises to help you understand the concepts better. We will also provide links to the official Heaps documentation for further reference.</p>"},{"location":"#some-of-the-code-are-from-the-heaps-documentation","title":"~Some of the code are from the Heaps Documentation~","text":""},{"location":"Tutorial/Images_and_Sprites/","title":"Images and Sprites","text":"<p>To begin with, you'll need to make a new <code>Bitmap</code> in the <code>class Main extends hxd.App</code>, between the brackets</p> <pre><code>var bmp = new h2d.Bitmap();\n</code></pre> <p>Next, just like the previous chapter, we'll need to make a <code>tile</code> variablein the <code>init</code> function. And then reference our image</p> <pre><code>var tile = hxd.Res.imageHere.toTile();\n</code></pre> <p><code>Res</code> is assuming that you have a folder in your project called <code>res</code> which is your resource/asset folder <code>toTile();</code> is changing the image to a tile.</p> <p>now after, it's just simple as rendering the <code>tile</code> to the <code>s2d</code></p> <pre><code>bmp = new Bitmap(tile, s2d);\n</code></pre>"},{"location":"Tutorial/Images_and_Sprites/#sprites","title":"Sprites","text":"<p>Sprite tutorial will be here.</p>"},{"location":"Tutorial/ProjectStructure/","title":"Project Structure","text":"<p>To begin with, you'll need to download my Pre-made Template</p> <p>once downloaded, you can extract the ZIP file and rename it to whatever you want and open it in your preferred IDE/Code Editor (I personally use VSCode)</p> <p>And now run either one of the commands below</p> <p>Use SDL through HLSDL</p> <ul> <li><code>haxelib install hlsdl 1.13.0</code></li> </ul> <p>Use DirectX through HLDX:</p> <ul> <li><code>haxelib install hldx 1.13.0</code></li> </ul> <p>You may be wondering, \"What's the difference between the two?\" Well;</p> <p>HLSDL is more focused on Cross-Platform development</p> <p>While HLDX is more focused on Windows-specific development, or in other words, HLDX is limited to only the Windows Operating System.</p> <p>I am using HLSDL for this tutorial, but feel free to use HLDX instead.</p> <p>once you have either one installed, we can move on.</p> <p>In the .hxml file, <code>client.hl</code> can be renamed to whatever you want, but it must have the <code>.hl</code> extension (this goes for HLDX also)</p> <p>If you're using HLDX, just replace <code>-lib hlsdl</code> with <code>-lib hldx</code></p> <p>Upon running (by pressing F5), a window should show up, but some may encounter an error like:</p> <p><code>src\\module.c(506) : FATAL ERROR : Failed to load function sdl@get_window_grab</code></p> <p>this can be fixed by running the following commands one by one in Visual Studio Code's terminal:</p> <p><code>haxelib git heaps https://github.com/HeapsIO/heaps</code></p> <p><code>haxelib set heaps git</code></p> <p><code>haxelib git hlsdl https://github.com/HaxeFoundation/hashlink master libs/sdl</code></p> <p><code>haxelib git hldx</code> (for HLDX users)</p> <p>If the issue still persists, you can also try installing the nightly build for Hashlink, once you have installed it, you can follow these steps:</p> <p>Locate and Open the ZIP file you downloaded and open the Folder that is inside of it</p> <p></p> <p>Once the folder is open, copy all the contents by CTRL + A and CTRL + B</p> <p></p> <p>Next, find a folder called HaxeToolkit, for me, it's in my C: drive. And then open another folder called hl</p> <p></p> <p>Once your inside that folder, press CTRL + A and then CTRL + V, and replace all files.</p>"},{"location":"Tutorial/ProjectStructure/#dont-forget-to-add-the-hl-folder-to-your-path","title":"~Don't forget to add the HL folder to your PATH~","text":"<p>And now simply Re-open visual studio code and run it again.</p> <p>If you're on a Linux Distribution, you'll need to download one of the assets of the Nightly Build (for hashlink) based on your system</p> <p>there's two versions</p> <p>the AMD64 version and the i386 version</p> <p>AMD64 is for x64 bit computers, while i386 are for x86 or x36 bit computers</p>"},{"location":"Tutorial/Shapes/","title":"Basic Shapes","text":"<p>One of the basics, is creating Shapes, and we can do that by typing this in <code>hxd.App</code> inside the brackets:</p> <pre><code>var bitmap = h2d.Bitmap;\n</code></pre> <p>Realize how there's no <code>new</code> statement before it, that's because we're gonna edit it in the <code>init</code> function.  <code>h2d.Bitmap</code> is a way of drawing a single tile, but it isn't recommended as it causes an increase in Draw Calls (we'll talk about this later)</p> <p>Now, add another line in the <code>init</code> function (between the brackets):</p> <pre><code>var tile = h2d.Tile.fromColor(0xFF0000, 100, 100);\n</code></pre> <p>This takes three parameters, the Color, Width and Height of the Shape. <code>fromColor</code> is specifying that the Tile should be colored.</p> <p>Additionally, we would want to see the Tile on the screen, start by typing:</p> <pre><code>bmp = new Bitmap(tile, s2d);\n</code></pre> <p>And with this, we should now see a Red Square on our Project</p> <p></p>"},{"location":"Tutorial/Shapes/#changing-the-shapes-position","title":"Changing the Shape's Position","text":"<p>What if we want to change the position of the shape? we can do so by typing this in the <code>init</code> function:</p> <pre><code>bmp.x = s2d.width * 0.5;\nbmp.y = s2d.height * 0.5;\n</code></pre> <p>See how we're referencing <code>bmp</code> instead of <code>tile</code>? this is because <code>bmp</code> is in charge of actually bringing the <code>tile</code> unto the screen, And we can play around  with the <code>x</code> and <code>y</code> values of it. <code>s2d.width</code> and <code>s2d.height</code> is a way of checking the scene's width and  height (basically the screen's width and height), and we multiplied that by <code>0.5</code>, and  this makes the Square completely in the center of the screen. Now, once we run our Project, we get...</p> <p></p> <p>Well, it's not exactly centered, is it? we can fix that by manipulating the Anchor point of the Square by typing this in the <code>init</code> function:</p> <pre><code>tile.dx = -tile.width / 2;\ntile.dy = -tile.height / 2;\n</code></pre> <p>You may have noticed that we're now referencing the <code>tile</code> and not the <code>bmp</code>, this is because the <code>tile</code> has it's own set of properties that the <code>bmp</code> doesn't have. <code>-tile.width / 2;</code> is changing the Anchor Point (dx) to negative and dividing that by <code>2</code>, same goes for <code>tile.dy</code>. So why <code>-tile.width</code> and not <code>tile.width</code>? Because <code>tile.width</code> will be adding on top of the original Width of the tile, same also goes  for <code>tile.height</code>.</p> <p>and with that, we have a perfectly centered Square</p> <p></p>"},{"location":"Tutorial/Shapes/#what-are-draw-calls","title":"What are Draw Calls?","text":"<p>Draw Calls is a command that is sent to the GPU to render objects on the screen, such as sprites and backgrounds.</p> <p>Draw Calls come in separate requests to the GPU, and because of that it can negatively impact performance.</p> <p>There's methods to optimize performance, such as batching to reduce the number of Draw Calls required. Batching invovles combining multiple objects into a single Draw Call, which can improve performance as it reduces the number of request sent to the GPU.</p>"},{"location":"Tutorial/Texts/","title":"Texts and Fonts","text":""},{"location":"Tutorial/Texts/#default-font","title":"Default Font","text":"<p>In the Project Structure page, we gave the code for each of the files, as well as the Main.hx file that we are gonna edit now, if you don't have a Main.hx file, make one and copy the code below:</p> <pre><code>class Main extends hxd.App {    override function init() {\n}\noverride function update(dt:Float) {\n}\nstatic function main() {\nnew Main();\n}\n}\n</code></pre> <p>Now, let's start with adding a basic text with the default font, we can do this by typing this line in the <code>init</code> function between the brackets:</p> <pre><code>var tf = new Text(hxd.res.DefaultFont.get());\n</code></pre> <p>this creates a new variable which we named <code>tf</code>, next we assign an object to it (In this case, it's <code>Text</code>) with <code>new</code> before it so it'll know to create a new instance of the object. Next, between the parentheses, we added <code>DefaultFont.get()</code>, this simply get's the default font that is provided. Now, we can specify what  we want the text to show, via a String:</p> <pre><code>tf.text = \"Hello, Heaps!;\n</code></pre> <p>We referenced our variable called tf along with a property of it, which is <code>.Text</code>. Next we specified what we want the Text to say between double quotation marks (As a STRING is required)</p> <p>If we run our Project now (By pressing F5), you'll see nothing, that's because  we haven't added it to the Project Scene yet, we can do this by typing:</p> <pre><code>s2d.addChild(tf)\n</code></pre> <p><code>s2d</code> is short for Scene 2 Dimensional, we can think of scenes like a folder consisting of papers, and those papers represent the Texts and Game Objects in that scene, and we're adding another paper into that folder which is <code>tf</code>, with <code>.addChild</code></p> <p>The final result should look like this:</p> <p></p> <p>along with the code looking like this:</p> <pre><code>import hxd.res.DefaultFont;\nimport h2d.Text;\nclass Main extends hxd.App {    override function init() {\nvar tf = new Text(DefaultFont.get());\ntf.text = \"Hello, Heaps!\";\ns2d.addChild(tf);\n}\noverride function update(dt:Float) {\n}\nstatic function main() {\nnew Main();\n}\n}\n</code></pre>"},{"location":"Tutorial/Texts/#custom-fonts","title":"Custom Fonts","text":"<p>So, what if we want to use Custom Fonts? first off, you'll need to download a program called BMFont, there's multiple options but I'll be using BMFont for this tutorial.  Once BMFont is opened, you should see this window</p> <p></p> <p>If your characters background look dark compared to mines, just click on each one of them until all are lit up.</p> <p>Now, press F on your keyboard, once pressed, you should see this:</p> <p></p> <p>Once on that window, click on \"Render from TrueType outline\" under  Rasterization</p> <p></p> <p>You can change the font and font size to your liking, but remember to turn \"Render from TrueType outline\" on</p> <p>Next, press \"T\" on the keyboard to open Export Options, and change the settings which are highlighted below:</p> <p></p> <p>And now, you're good to go! press \"CTRL + S\" and go to your res folder in your Project and save it there.</p> <p>Now, let's change our <code>Main.hx</code> file. We need to add a new line on top of our <code>var tf</code> line:</p> <pre><code>var customFont = hxd.Res.FontName.toFont();\n</code></pre> <p>Change <code>FontName</code> to the name which you exported font as, <code>toFont()</code> is changing the .fnt file to a .bfnt file which Heaps can understand</p> <p>now change your <code>var tf = new Text(DefaultFont.get());</code> to:</p> <pre><code>var tf = new Text(customFont);\n</code></pre> <p>As you can see, we switched <code>DefaultFont.get()</code> with our customFont variable to set the text font to our desired font.</p> <p>Next, add one more line but this time in the <code>main</code> function between  the brackets:</p> <pre><code>hxd.Res.initEmbed();\n</code></pre> <p><code>.initEmbed()</code> is used to Embed all our files that is in our res folder into the game (Fonts, Images, etc) now, you should see your custom font in your Project once you run it (I'm using the Arial font)</p> <p></p> <p>and your code should look like this:</p> <pre><code>import hxd.res.Font;\nimport hxd.res.DefaultFont;\nimport h2d.Text;\nclass Main extends hxd.App {    override function init() {\nvar customFont = hxd.Res.Arial.toFont();\nvar tf = new Text(customFont);\ntf.text = \"Hello, Heaps!\";\ns2d.addChild(tf);\n}\noverride function update(dt:Float) {\n}\nstatic function main() {\nhxd.Res.initEmbed();\nnew Main();\n}\n}\n</code></pre> <p>You can put <code>hxd.Res.initEmbed();</code> after <code>new Main();</code> and i t'll still work, so if you did do that, don't worry about it. </p>"}]}